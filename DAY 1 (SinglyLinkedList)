# Node class represents a single node in a singly linked list
class Node:
    def __init__(self, data=None, next=None):
        self.data = data  # Stores the data of the node
        self.next = next  # Points to the next node in the list

# Singly Linked List class
class SLL:
    def __init__(self, start=None):
        self.start = start  # Points to the first node of the list

    # Check if the list is empty
    def is_empty(self):
        return self.start == None

    # Insert a new node at the start of the list
    def insert_at_start(self, item):
        n = Node(item, self.start)  # Create a new node that points to the current start
        self.start = n  # Update the start to the new node

    # Insert a new node at the end of the list
    def insert_at_last(self, item):
        n = Node(item, None)  # Create a new node with no next pointer
        temp = self.start
        if not self.is_empty():  # If the list is not empty
            while temp.next is not None:  # Traverse to the last node
                temp = temp.next
            temp.next = n  # Update the last node's next to the new node
        else:
            self.start = n  # If the list is empty, make the new node the start

    # Search for a node containing the given item
    def search(self, item):
        temp = self.start
        while temp is not None:  # Traverse through the list
            if temp.data == item:  # If the node's data matches the item
                return temp  # Return the node
            temp = temp.next
        return None  # Return None if the item is not found

    # Insert a new node after a given node
    def insert_after(self, temp, item):
        if temp is not None:  # Check if the given node exists
            n = Node(item, temp.next)  # Create a new node pointing to the next of the given node
            temp.next = n  # Update the given node's next to the new node

    # Delete the first node of the list
    def delete_first(self):
        if self.start is not None:  # Check if the list is not empty
            self.start = self.start.next  # Update start to the second node

    # Delete the last node of the list
    def delete_last(self):
        if self.start is None:  # If the list is empty, do nothing
            pass
        elif self.start.next is None:  # If the list has only one node
            self.start = None  # Remove the node by setting start to None
        else:
            temp = self.start
            while temp.next.next is not None:  # Traverse to the second last node
                temp = temp.next
            temp.next = None  # Remove the last node by setting second last's next to None

    # Delete a node containing the given item
    def delete_item(self, item):
        if self.start is None:  # If the list is empty, do nothing
            pass
        elif self.start.next is None:  # If the list has only one node
            if self.start.data == item:  # Check if it matches the item
                self.start = None  # Remove the node by setting start to None
        else:
            temp = self.start
            if temp.data == item:  # If the first node matches the item
                self.start = temp.next  # Remove it by updating start to the second node
            else:
                while temp.next is not None:  # Traverse the list
                    if temp.next.data == item:  # Check if the next node matches the item
                        temp.next = temp.next.next  # Remove the node by skipping it
                        break
                    temp = temp.next

    # Print all the elements of the list
    def print_all(self):
        temp = self.start
        while temp is not None:  # Traverse through the list
            print(temp.data, end=' ')  # Print the data of each node
            temp = temp.next  # Move to the next node

# Example usage of the SLL class
l = SLL()  # Create an empty singly linked list
l.insert_at_last(50)  # Insert 50 at the end
l.insert_at_last(70)  # Insert 70 at the end
l.insert_at_start(10)  # Insert 10 at the start
l.insert_after(l.search(10), 20)  # Insert 20 after the node containing 10
l.delete_item(70)  # Delete the node containing 70
l.print_all()  # Print all the elements in the list
# Output: 10 20 50
